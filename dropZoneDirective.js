// Generated by CoffeeScript 1.6.3
// Couldn't get JSFiddle to work with CoffeeScript as advertised - Link to CoffeeScript Gist: https://gist.github.com/lsiv568/5623361
// http://jsfiddle.net/lsiv568/fsfPe/10/
(function() {
  'use strict';
  app.directive('fileDropzone', function() {
    return {
      restrict: 'A',
      scope: {
        file: '=',
        fileName: '='
      },
      link: function(scope, element, attrs) {
        var checkSize, isTypeValid, processDragOverOrEnter, validMimeTypes;
        processDragOverOrEnter = function(event) {
			
          if (event != null) {
            event.preventDefault();
          }
          if(event.dataTransfer){
            event.dataTransfer.effectAllowed = 'move';  
          }
          if(event.originalEvent && event.originalEvent.dataTransfer){
            event.originalEvent.dataTransfer.effectAllowed = 'move';  
          }
          return false;
        };
        validMimeTypes = attrs.fileDropzone;
        checkSize = function(size) {
          var _ref;
          if (((_ref = attrs.maxFileSize) === (void 0) || _ref === '') || (size / 1024) / 1024 < attrs.maxFileSize) {
            return true;
          } else {
            alert("File must be smaller than " + attrs.maxFileSize + " MB");
            return false;
          }
        };
        isTypeValid = function(type) {
          if ((validMimeTypes === (void 0) || validMimeTypes === '') || validMimeTypes.indexOf(type) > -1) {
            return true;
          } else {
            alert("Invalid file type.  File must be one of following types " + validMimeTypes);
            return false;
          }
        };
        element.bind('dragover', processDragOverOrEnter);
        element.bind('dragenter', processDragOverOrEnter);
        return element.bind('drop', function(event) {
          var file, name, reader, size, type;
          if (event != null) {
            event.preventDefault();
          }

          reader = new FileReader();
          reader.onload = function(evt) {
            if (checkSize(size) && isTypeValid(type)) {
              return scope.$apply(function() {
                scope.file = evt.target.result;
                if (angular.isString(scope.fileName)) {
                  return scope.fileName = name;
                }
              });
            }
          };
          if(event.dataTransfer){
            file = event.dataTransfer.files[0];
          }else{
            if(event.originalEvent && event.originalEvent.dataTransfer){
              file = event.originalEvent.dataTransfer.files[0];
            }
          }
		  // URL to an image. Not a file
			event.dataTransfer = event.originalEvent.dataTransfer;
			var url = event.dataTransfer.getData('URL');
			if(url.length==0){
			  url = event.dataTransfer.getData('text');
			}
			if(url.length>0){
				scope.$emit("Drop.Url", url);
				return false;
			}
          name = file.name;
          type = file.type;
          size = file.size;
          reader.readAsDataURL(file);
          return false;
        });
      }
    };
  });

}).call(this);